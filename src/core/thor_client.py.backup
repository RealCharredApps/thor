# src/core/thor_client.py
import os
import asyncio
import json
import logging
import subprocess
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List, Optional, Callable
import anthropic
from dataclasses import dataclass
import sqlite3
import uuid

@dataclass
class Message:
    role: str
    content: str
    timestamp: datetime
    metadata: Dict[str, Any] = None

class ThorClient:
    """THOR AI Development Framework - Core Client"""
    
    def __init__(self, config_path: str = None):
        self.config = self._load_config(config_path)
        self.anthropic_client = None
        self.conversation_history = []
        self.tools_registry = {}
        self.logger = self._setup_logging()
        self.db_path = Path.home() / '.thor' / 'thor.db'
        self.project_root = Path.cwd()
        
        # Initialize components
        self._init_database()
        self._init_anthropic()
        self._register_tools()
        
    def _load_config(self, config_path: str = None) -> Dict[str, Any]:
        """Load configuration from file or environment"""
        if config_path and Path(config_path).exists():
            import yaml
            with open(config_path, 'r') as f:
                return yaml.safe_load(f)
        
        # Default configuration
        return {
            'anthropic': {
                'api_key': os.getenv('ANTHROPIC_API_KEY'),
                'model': 'claude-3-5-sonnet-20241022',
                'max_tokens': 4000
            },
            'tools': {
                'enabled': True,
                'timeout': 30
            },
            'logging': {
                'level': 'INFO',
                'file': 'thor.log'
            }
        }
    
    def _setup_logging(self) -> logging.Logger:
        """Setup logging configuration"""
        logger = logging.getLogger('THOR')
        logger.setLevel(getattr(logging, self.config['logging']['level']))
        
        # Console handler
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        
        # File handler
        log_dir = Path.home() / '.thor' / 'logs'
        log_dir.mkdir(parents=True, exist_ok=True)
        fh = logging.FileHandler(log_dir / self.config['logging']['file'])
        fh.setLevel(logging.DEBUG)
        
        # Formatter
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        ch.setFormatter(formatter)
        fh.setFormatter(formatter)
        
        logger.addHandler(ch)
        logger.addHandler(fh)
        
        return logger
    
    def _init_database(self):
        """Initialize SQLite database"""
        self.db_path.parent.mkdir(parents=True, exist_ok=True)
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Conversations table
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS conversations (
                id TEXT PRIMARY KEY,
                role TEXT NOT NULL,
                content TEXT NOT NULL,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                metadata TEXT
            )
        ''')
        
        # Tools usage table
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS tool_usage (
                id TEXT PRIMARY KEY,
                tool_name TEXT NOT NULL,
                arguments TEXT,
                result TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        
        self.logger.info("Database initialized")
    
    def _init_anthropic(self):
        """Initialize Anthropic client"""
        api_key = self.config['anthropic']['api_key']
        if not api_key:
            raise ValueError("ANTHROPIC_API_KEY not found. Set it in environment or config.")
        
        self.anthropic_client = anthropic.Anthropic(api_key=api_key)
        self.logger.info("Anthropic client initialized")
    
    def _register_tools(self):
        """Register available tools"""
        self.tools_registry = {
            'read_file': self._tool_read_file,
            'write_file': self._tool_write_file,
            'list_files': self._tool_list_files,
            'create_directory': self._tool_create_directory,
            'run_command': self._tool_run_command,
            'search_files': self._tool_search_files,
            'analyze_code': self._tool_analyze_code,
        }
        self.logger.info(f"Registered {len(self.tools_registry)} tools")
    
    # Tool implementations
    async def _tool_read_file(self, file_path: str) -> str:
        """Read file contents"""
        try:
            full_path = self.project_root / file_path
            if not full_path.exists():
                return f"Error: File {file_path} not found"
            
            with open(full_path, 'r') as f:
                content = f.read()
            
            self.logger.debug(f"Read file: {file_path}")
            return content
        except Exception as e:
            return f"Error reading file: {str(e)}"
    
    async def _tool_write_file(self, file_path: str, content: str) -> str:
        """Write content to file"""
        try:
            full_path = self.project_root / file_path
            full_path.parent.mkdir(parents=True, exist_ok=True)
            
            with open(full_path, 'w') as f:
                f.write(content)
            
            self.logger.debug(f"Wrote file: {file_path}")
            return f"Successfully wrote to {file_path}"
        except Exception as e:
            return f"Error writing file: {str(e)}"
    
    async def _tool_list_files(self, directory: str = ".", pattern: str = "*") -> str:
        """List files in directory"""
        try:
            dir_path = self.project_root / directory
            if not dir_path.exists():
                return f"Directory {directory} not found"
            
            files = []
            folders = []
            
            # Get all items
            for item in sorted(dir_path.glob(pattern)):
                if item.is_file():
                    size = item.stat().st_size
                    files.append(f"📄 {item.name} ({size:,} bytes)")
                elif item.is_dir() and not item.name.startswith('.'):
                    folders.append(f"📁 {item.name}/")
            
            # Build result
            result = f"Contents of {dir_path.absolute()}:\n\n"
            
            if folders:
                result += "Folders:\n"
                for folder in folders:
                    result += f"  {folder}\n"
                result += "\n"
            
            if files:
                result += "Files:\n"
                for file in files:
                    result += f"  {file}\n"
            
            if not files and not folders:
                result = "No files or folders found"
            
            return result
        except Exception as e:
            return f"Error listing files: {str(e)}"
    
    async def _tool_create_directory(self, path: str) -> str:
        """Create directory"""
        try:
            dir_path = self.project_root / path
            dir_path.mkdir(parents=True, exist_ok=True)
            return f"Created directory: {path}"
        except Exception as e:
            return f"Error creating directory: {str(e)}"
    
    async def _tool_run_command(self, command: str, cwd: str = ".") -> str:
        """Run shell command"""
        try:
            work_dir = self.project_root / cwd
            
            result = subprocess.run(
                command,
                shell=True,
                cwd=work_dir,
                capture_output=True,
                text=True,
                timeout=self.config['tools']['timeout']
            )
            
            output = f"Exit code: {result.returncode}\n"
            if result.stdout:
                output += f"Output:\n{result.stdout}\n"
            if result.stderr:
                output += f"Error:\n{result.stderr}"
            
            return output
        except subprocess.TimeoutExpired:
            return "Error: Command timed out"
        except Exception as e:
            return f"Error running command: {str(e)}"
    
    async def _tool_search_files(self, query: str, file_pattern: str = "*.py") -> str:
        """Search for text in files"""
        try:
            results = []
            
            for file_path in self.project_root.rglob(file_pattern):
                if file_path.is_file():
                    try:
                        with open(file_path, 'r') as f:
                            content = f.read()
                            if query.lower() in content.lower():
                                # Find line numbers
                                lines = content.split('\n')
                                for i, line in enumerate(lines, 1):
                                    if query.lower() in line.lower():
                                        results.append(
                                            f"{file_path.relative_to(self.project_root)}:{i}: {line.strip()}"
                                        )
                    except Exception:
                        continue
            
            return "\n".join(results) if results else f"No matches found for '{query}'"
        except Exception as e:
            return f"Error searching files: {str(e)}"
    
    async def _tool_analyze_code(self, file_path: str) -> str:
        """Analyze code quality"""
        try:
            content = await self._tool_read_file(file_path)
            if content.startswith("Error"):
                return content
            
            # Basic analysis
            lines = content.split('\n')
            analysis = f"File: {file_path}\n"
            analysis += f"Lines: {len(lines)}\n"
            analysis += f"Size: {len(content)} bytes\n"
            
            # Count imports, functions, classes
            imports = sum(1 for line in lines if line.strip().startswith(('import ', 'from ')))
            functions = sum(1 for line in lines if line.strip().startswith('def '))
            classes = sum(1 for line in lines if line.strip().startswith('class '))
            
            analysis += f"Imports: {imports}\n"
            analysis += f"Functions: {functions}\n"
            analysis += f"Classes: {classes}\n"
            
            return analysis
        except Exception as e:
            return f"Error analyzing code: {str(e)}"
    
    def get_tools_schema(self) -> List[Dict[str, Any]]:
        """Get tools schema for Claude"""
        return [
            {
                "name": "read_file",
                "description": "Read the contents of a file",
                "input_schema": {
                    "type": "object",
                    "properties": {
                        "file_path": {
                            "type": "string",
                            "description": "Path to the file to read"
                        }
                    },
                    "required": ["file_path"]
                }
            },
            {
                "name": "write_file",
                "description": "Write content to a file",
                "input_schema": {
                    "type": "object",
                    "properties": {
                        "file_path": {
                            "type": "string",
                            "description": "Path to the file to write"
                        },
                        "content": {
                            "type": "string",
                            "description": "Content to write to the file"
                        }
                    },
                    "required": ["file_path", "content"]
                }
            },
            {
                "name": "list_files",
                "description": "List files in a directory",
                "input_schema": {
                    "type": "object",
                    "properties": {
                        "directory": {
                            "type": "string",
                            "description": "Directory to list files from",
                            "default": "."
                        },
                        "pattern": {
                            "type": "string",
                            "description": "File pattern to match",
                            "default": "*"
                        }
                    }
                }
            },
            {
                "name": "create_directory",
                "description": "Create a directory",
                "input_schema": {
                    "type": "object",
                    "properties": {
                        "path": {
                            "type": "string",
                            "description": "Path of directory to create"
                        }
                    },
                    "required": ["path"]
                }
            },
            {
                "name": "run_command",
                "description": "Run a shell command",
                "input_schema": {
                    "type": "object",
                    "properties": {
                        "command": {
                            "type": "string",
                            "description": "Command to run"
                        },
                        "cwd": {
                            "type": "string",
                            "description": "Working directory",
                            "default": "."
                        }
                    },
                    "required": ["command"]
                }
            },
            {
                "name": "search_files",
                "description": "Search for text in files",
                "input_schema": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "Text to search for"
                        },
                        "file_pattern": {
                            "type": "string",
                            "description": "File pattern to search in",
                            "default": "*.py"
                        }
                    },
                    "required": ["query"]
                }
            },
            {
                "name": "analyze_code",
                "description": "Analyze code file",
                "input_schema": {
                    "type": "object",
                    "properties": {
                        "file_path": {
                            "type": "string",
                            "description": "Path to code file to analyze"
                        }
                    },
                    "required": ["file_path"]
                }
            }
        ]
    
    async def chat(self, message: str, use_tools: bool = True) -> str:
    """Main chat interface"""
        """Main chat interface"""
        return "Chat method needs implementation"
    try:
        self.logger.info(f"User: {message[:50]}...")
        
        # Build messages
        messages = [{"role": "user", "content": message}]
        
        # System prompt
        system_prompt = """You are THOR, an advanced AI development assistant with access to powerful tools.
        You can read/write files, run commands, analyze code, and help with software development.
        Be helpful, thorough, and always explain what you're doing.
        
        IMPORTANT: When asked to perform an action, USE THE TOOLS to actually do it, don't just describe what you would do."""
        
        # Get tools if enabled
        tools = self.get_tools_schema() if use_tools else None
        
        # Call Claude
        response = self.anthropic_client.messages.create(
            model=self.config['anthropic']['model'],
            max_tokens=self.config['anthropic']['max_tokens'],
            system=system_prompt,
            messages=messages,
            tools=tools
        )
        
        # Process response
        result_text = ""
        tool_results = []
        
        # Check if Claude wants to use tools
        for content_block in response.content:
            if content_block.type == "text":
                result_text += content_block.text
            elif content_block.type == "tool_use":
                tool_name = content_block.name
                tool_args = content_block.input
                tool_id = content_block.id
                
                self.logger.info(f"Using tool: {tool_name} with args: {tool_args}")
                
                # Execute the tool
                if tool_name in self.tools_registry:
                    try:
                        result = await self.tools_registry[tool_name](**tool_args)
                        tool_results.append({
                            "type": "tool_result",
                            "tool_use_id": tool_id,
                            "content": str(result)
                        })
                    except Exception as e:
                        tool_results.append({
                            "type": "tool_result",
                            "tool_use_id": tool_id,
                            "content": f"Error: {str(e)}",
                            "is_error": True
                        })
                else:
                    tool_results.append({
                        "type": "tool_result",
                        "tool_use_id": tool_id,
                        "content": f"Unknown tool: {tool_name}",
                        "is_error": True
                    })
        
        # If tools were used, get final response
        if tool_results:
            messages.append({"role": "assistant", "content": response.content})
            messages.append({"role": "user", "content": tool_results})
            
            final_response = self.anthropic_client.messages.create(
                model=self.config['anthropic']['model'],
                max_tokens=self.config['anthropic']['max_tokens'],
                system=system_prompt,
                messages=messages
            )
            
            result_text = final_response.content[0].text
        
        # Save to history
        self._save_conversation(message, result_text)
        
        self.logger.info("Response generated successfully")
        return result_text
        
    except Exception as e:
        self.logger.error(f"Chat error: {e}")
        import traceback
        self.logger.error(traceback.format_exc())
        return f"Error: {str(e)}"
    except Exception as e:
        self.logger.error(f"Chat error: {e}")
        import traceback
        self.logger.error(traceback.format_exc())
        return f"Error: {str(e)}"
    except Exception as e:
        self.logger.error(f"Chat error: {e}")
        import traceback
        self.logger.error(traceback.format_exc())
        return f"Error: {str(e)}"
    
    def _save_conversation(self, user_msg: str, assistant_msg: str):
        """Save conversation to database"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Save user message
        cursor.execute('''
            INSERT INTO conversations (id, role, content, timestamp)
            VALUES (?, ?, ?, ?)
        ''', (str(uuid.uuid4()), 'user', user_msg, datetime.now()))
        
        # Save assistant message  
        cursor.execute('''
            INSERT INTO conversations (id, role, content, timestamp)
            VALUES (?, ?, ?, ?)
        ''', (str(uuid.uuid4()), 'assistant', assistant_msg, datetime.now()))
        
        conn.commit()
        conn.close()
    async def chat(self, message: str, use_tools: bool = True) -> str:
        """Main chat interface"""
        try:
            self.logger.info(f"User: {message[:50]}...")
            
            # Build messages
            messages = [{"role": "user", "content": message}]
            
            # System prompt
            system_prompt = """You are THOR, an advanced AI development assistant with access to powerful tools.
            You can read/write files, run commands, analyze code, and help with software development.
            Always use your tools when asked to perform actions."""
            
            # Get tools if enabled
            tools = self.get_tools_schema() if use_tools else None
            
            # Call Claude
            response = self.anthropic_client.messages.create(
                model=self.config['anthropic']['model'],
                max_tokens=self.config['anthropic']['max_tokens'],
                system=system_prompt,
                messages=messages,
                tools=tools
            )
            
            # Process response
            result_text = ""
            tool_results = []
            
            # Check response content
            for content_block in response.content:
                if content_block.type == "text":
                    result_text += content_block.text
                elif content_block.type == "tool_use":
                    tool_name = content_block.name
                    tool_args = content_block.input
                    tool_id = content_block.id
                    
                    self.logger.info(f"Using tool: {tool_name}")
                    
                    # Execute tool
                    if tool_name in self.tools_registry:
                        try:
                            result = await self.tools_registry[tool_name](**tool_args)
                            tool_results.append({
                                "type": "tool_result",
                                "tool_use_id": tool_id,
                                "content": str(result)
                            })
                        except Exception as e:
                            tool_results.append({
                                "type": "tool_result",
                                "tool_use_id": tool_id,
                                "content": f"Error: {str(e)}",
                                "is_error": True
                            })
            
            # If tools were used, get final response
            if tool_results:
                messages.append({"role": "assistant", "content": response.content})
                messages.append({"role": "user", "content": tool_results})
                
                final_response = self.anthropic_client.messages.create(
                    model=self.config['anthropic']['model'],
                    max_tokens=self.config['anthropic']['max_tokens'],
                    system=system_prompt,
                    messages=messages
                )
                
                result_text = final_response.content[0].text
            
            # Save conversation
            self._save_conversation(message, result_text)
            
            return result_text
            
        except Exception as e:
            self.logger.error(f"Chat error: {e}")
            return f"Error: {str(e)}"
    
    def _save_conversation(self, user_msg: str, assistant_msg: str):
        """Save conversation to database"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Save messages
        for role, content in [("user", user_msg), ("assistant", assistant_msg)]:
            cursor.execute('''
                INSERT INTO conversations (id, role, content, timestamp)
                VALUES (?, ?, ?, ?)
            ''', (str(uuid.uuid4()), role, content, datetime.now()))
        
        conn.commit()
        conn.close()
